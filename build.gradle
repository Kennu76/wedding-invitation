plugins {
    id 'org.springframework.boot' version '2.4.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.flywaydb.flyway' version '7.5.2'
}

group = 'com.sample'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/release' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter:2.4.0-SNAPSHOT'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.4.0-SNAPSHOT'

    compileOnly 'org.projectlombok:lombok:1.18.8'

    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'

    compile('org.springframework.boot:spring-boot-starter')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.18'

    compile 'org.flywaydb:flyway-core:7.5.2'

    runtimeOnly 'mysql:mysql-connector-java'

    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.27.Final'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.7.7'
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.7.0'
}

test {
    useJUnitPlatform()
}

// import java.util.Properties
// def props = new Properties()

// if (project.hasProperty('prod')) {
//     file('src/main/resources/application-prod.properties').withInputStream {
//         props.load(it)
//     }
// } else {
//     file('src/main/resources/application-dev.properties').withInputStream {
//         props.load(it)
//     }
// }

// flyway {
//     url = props['spring.datasource.url']
//     user = props['spring.datasource.username']
//     password = props['spring.datasource.password']
//     locations = props['spring.flyway.locations']
// }
